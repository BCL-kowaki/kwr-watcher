{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":["file:///Users/hirapro_tokyo/Desktop/SMS%E8%AA%8D%E8%A8%BC/my-app/analyst/pages/api/send-sms.js"],"sourcesContent":["const twilio = require(\"twilio\");\n\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") {\n    return res.status(405).json({ error: \"Method not allowed\" });\n  }\n\n  const { phone } = req.body;\n\n  if (!phone) {\n    return res.status(400).json({ error: \"電話番号を入力してください\" });\n  }\n\n  // 電話番号を正規化（ハイフン、スペース、+を削除）\n  let cleanPhone = phone.replace(/[-\\s+]/g, \"\");\n\n  // 国際形式に変換\n  let internationalPhone;\n  if (cleanPhone.startsWith(\"81\")) {\n    // 既に81で始まっている場合\n    internationalPhone = `+${cleanPhone}`;\n  } else if (cleanPhone.startsWith(\"0\")) {\n    // 0で始まる国内形式の場合\n    internationalPhone = `+81${cleanPhone.substring(1)}`;\n  } else {\n    return res.status(400).json({ error: \"電話番号の形式が正しくありません\" });\n  }\n\n  console.log(\"=== デバッグ情報 ===\");\n  console.log(\"入力された電話番号:\", phone);\n  console.log(\"クリーン後:\", cleanPhone);\n  console.log(\"国際形式:\", internationalPhone);\n  console.log(\n    \"TWILIO_VERIFY_SERVICE_SID:\",\n    process.env.TWILIO_VERIFY_SERVICE_SID\n  );\n  console.log(\"==================\");\n\n  try {\n    const client = twilio(\n      process.env.TWILIO_ACCOUNT_SID,\n      process.env.TWILIO_AUTH_TOKEN\n    );\n\n    await client.verify.v2\n      .services(process.env.TWILIO_VERIFY_SERVICE_SID)\n      .verifications.create({\n        to: internationalPhone,\n        channel: \"sms\",\n        locale: \"ja\",\n      });\n\n    return res.status(200).json({\n      success: true,\n      message: \"SMS送信成功\",\n    });\n  } catch (error) {\n    console.error(\"SMS送信エラー:\", error);\n    console.error(\"エラーコード:\", error.code);\n    console.error(\"エラーメッセージ:\", error.message);\n\n    if (error.code === 60203) {\n      return res.status(429).json({\n        error:\n          \"送信回数の制限に達しました。しばらくしてから再度お試しください。\",\n      });\n    }\n\n    if (error.code === 60200) {\n      return res.status(400).json({\n        error: \"電話番号の形式が正しくありません。\",\n      });\n    }\n\n    if (error.code === 21608) {\n      return res.status(403).json({\n        error:\n          \"この電話番号は認証されていません。トライアルアカウントでは、事前に認証した番号にのみSMSを送信できます。\",\n      });\n    }\n\n    return res.status(500).json({\n      error: \"SMS送信に失敗しました。電話番号を確認してください。\",\n    });\n  }\n}\n"],"names":[],"mappings":";;;;AAAA,MAAM;AAES,eAAe,QAAQ,GAAG,EAAE,GAAG;IAC5C,IAAI,IAAI,MAAM,KAAK,QAAQ;QACzB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAqB;IAC5D;IAEA,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,IAAI;IAE1B,IAAI,CAAC,OAAO;QACV,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAgB;IACvD;IAEA,2BAA2B;IAC3B,IAAI,aAAa,MAAM,OAAO,CAAC,WAAW;IAE1C,UAAU;IACV,IAAI;IACJ,IAAI,WAAW,UAAU,CAAC,OAAO;QAC/B,gBAAgB;QAChB,qBAAqB,CAAC,CAAC,EAAE,YAAY;IACvC,OAAO,IAAI,WAAW,UAAU,CAAC,MAAM;QACrC,eAAe;QACf,qBAAqB,CAAC,GAAG,EAAE,WAAW,SAAS,CAAC,IAAI;IACtD,OAAO;QACL,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAmB;IAC1D;IAEA,QAAQ,GAAG,CAAC;IACZ,QAAQ,GAAG,CAAC,cAAc;IAC1B,QAAQ,GAAG,CAAC,UAAU;IACtB,QAAQ,GAAG,CAAC,SAAS;IACrB,QAAQ,GAAG,CACT,8BACA,QAAQ,GAAG,CAAC,yBAAyB;IAEvC,QAAQ,GAAG,CAAC;IAEZ,IAAI;QACF,MAAM,SAAS,OACb,QAAQ,GAAG,CAAC,kBAAkB,EAC9B,QAAQ,GAAG,CAAC,iBAAiB;QAG/B,MAAM,OAAO,MAAM,CAAC,EAAE,CACnB,QAAQ,CAAC,QAAQ,GAAG,CAAC,yBAAyB,EAC9C,aAAa,CAAC,MAAM,CAAC;YACpB,IAAI;YACJ,SAAS;YACT,QAAQ;QACV;QAEF,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAC1B,SAAS;YACT,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,aAAa;QAC3B,QAAQ,KAAK,CAAC,WAAW,MAAM,IAAI;QACnC,QAAQ,KAAK,CAAC,aAAa,MAAM,OAAO;QAExC,IAAI,MAAM,IAAI,KAAK,OAAO;YACxB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAC1B,OACE;YACJ;QACF;QAEA,IAAI,MAAM,IAAI,KAAK,OAAO;YACxB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAC1B,OAAO;YACT;QACF;QAEA,IAAI,MAAM,IAAI,KAAK,OAAO;YACxB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAC1B,OACE;YACJ;QACF;QAEA,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAC1B,OAAO;QACT;IACF;AACF","debugId":null}}]
}